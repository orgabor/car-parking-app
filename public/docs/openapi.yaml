openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/v1/password:
    put:
      summary: ''
      operationId: putApiV1Password
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: ''
                  example: quas
                password:
                  type: string
                  description: ''
                  example: qui
              required:
                - current_password
                - password
      security: []
  /api/v1/auth/register:
    post:
      summary: ''
      operationId: postApiV1AuthRegister
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: qxhviuk
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: manley38@example.com
                password:
                  type: string
                  description: ''
                  example: quis
              required:
                - name
                - email
                - password
      security: []
  /api/v1/auth/login:
    post:
      summary: ''
      operationId: postApiV1AuthLogin
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: bethany03@example.net
                password:
                  type: string
                  description: ''
                  example: fugiat
              required:
                - email
                - password
      security: []
  /api/v1/profile:
    get:
      summary: ''
      operationId: getApiV1Profile
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
    put:
      summary: ''
      operationId: putApiV1Profile
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: vel
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: leola.pacocha@example.org
              required:
                - name
                - email
      security: []
  /api/v1/parkings/start:
    post:
      summary: ''
      operationId: postApiV1ParkingsStart
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Parking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vehicle_id:
                  type: integer
                  description: ''
                  example: 13
                zone_id:
                  type: integer
                  description: ''
                  example: 8
              required:
                - vehicle_id
                - zone_id
      security: []
  '/api/v1/parkings/{parking_id}':
    get:
      summary: ''
      operationId: getApiV1ParkingsParking_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Parking
      security: []
    put:
      summary: ''
      operationId: putApiV1ParkingsParking_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Parking
      security: []
    parameters:
      -
        in: path
        name: parking_id
        description: 'The ID of the parking.'
        example: 4
        required: true
        schema:
          type: integer
  /api/v1/vehicles:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Vehicles
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Vehicles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plate_number:
                  type: string
                  description: 'Must not be greater than 30 characters.'
                  example: xrurhfogiyl
              required:
                - plate_number
      security: []
  '/api/v1/vehicles/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Vehicles
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Vehicles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plate_number:
                  type: string
                  description: 'Must not be greater than 30 characters.'
                  example: umanbjdd
              required:
                - plate_number
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Vehicles
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the vehicle.'
        example: 2
        required: true
        schema:
          type: integer
  /api/v1/zones:
    get:
      summary: ''
      operationId: getApiV1Zones
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Zones
      security: []
tags:
  -
    name: Auth
    description: ''
  -
    name: Endpoints
    description: ''
  -
    name: Parking
    description: ''
  -
    name: Vehicles
    description: ''
  -
    name: Zones
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by visiting your dashboard and clicking <b>Generate API token</b>.'
security:
  -
    default: []
